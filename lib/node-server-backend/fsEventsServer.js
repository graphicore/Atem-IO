// FileSystem watching and event emmiting via socket.io
define(function(require, exports) {
    "use strict";

    var fileWatcher = require('chokidar')
      , path = require('path')
      ;

    // This reuses the event name that was generated by the
    // filewatcher; so here we replicate the event API
    // of that module.
    // FIXME: document what kind of events are received from the watcher
    // and what kind of events are emitted. We need this
    //  - to evaluate possible different implementations of the fs watcher
    //  - to define the API of the client
    function _fileChangeHandler(socket, baseDir, pathPrefix, event, filepath) {
        var normalizedPath = pathPrefix + path.relative(baseDir, filepath);
        socket.emit('all', {
            event:event,
            path: normalizedPath
        });
        socket.emit(event, normalizedPath);
    }

    // returns the watcher instance of the fileWatcher
    function createEmitter(socketIO, baseDir, pathPrefix) {
        var handler = _fileChangeHandler.bind(null, socketIO, baseDir
                                                    , pathPrefix || '');
        return fileWatcher.watch(baseDir, {ignoreInitial: true})
            .on('all', handler);
    }
    exports.createEmitter = createEmitter;
});
